Structured Programming - Djikstra, Hoare

Nomenclature:

Normal text represents my general notes and understanding of a chapter.
-> text prefixed with a simple arrow is a note on a specific paragraph
=> text prefixed with a double arrow is my interpretation of the chapter's conclusion
(text in parentheses is my own reaction to something that is being read)
"text in double quotes is, you guessed it, a quote"
("sometimes, there are quotes in parentheses to remind myself what some things mean")

Notes by chapter/section:
I) 
1) 
This was first written as personal notes and passed privately.
2) 
We delude ourselves thinking that we can apply the same solutions to big and small programs and that scale is an irrelevant factor.
=> Size matters
3)
-> Checking a mechanism's correctness from only inputs and outputs is a fool's errand for big machin.
-> You need to take the structure of the mechanism into account.
-> A program is a mechanism and the same rules of checking for correctness apply: you need to check the program's structure.
-> For a highly composite program to be correct, its component must be correct (?)
-> It's not enough to program something that works, you need to program something that demonstrably works right (tests? format proofs?)
-> Concerns of the programmer regarding code: correctness, adaptability, manageability
-> The more powerful machines become, the less we try to make our algorithms better; we rely on the machines power rather than efficient programs. Or: Parkinson's law ("work expands so as to fill the time available for its completion") can be extended to programs.
-> Machines will continue to increase in power and the things we should be able to do with them should also grow, not remain stagnant.
-> "the art of programming is the art of organising complexity, of mastering multitude and avoiding its bastard chaos as effectively as possible"
-> optimisation and manageability can be tradeoffs. Programs should be manageable.
-> Program testing only shows the presence of bugs, never their absence.

=> Testing by cases is anecdotal evidence. (what about property testing ?)

4)
